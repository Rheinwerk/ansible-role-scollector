# vim: set ft=ansible:
---

# Optionally Add Repos
- block:

    - name: Add Repo Signing Keys
      apt_key: id="{{ item.key_id }}" url="{{ item.key_url }}"
      with_items: "{{ _scollector.apt_repos }}"

    - name: Add Apt Repo
      apt_repository: repo="{{ item.repo_line }}" state=present
      with_items: "{{ _scollector.apt_repos }}"
      register: repo_added

    - name: Apt Update
      apt: update_cache=yes
      when: RW_APT_CACHE_UPDATE is defined or repo_added|changed

  when: _scollector.apt_repos is defined

- set_fact:
    install_state: latest
  when: RW_ENABLE_DOWNLOADS is defined


- name: Install packages
  apt: name="{{ item }}" state={{ install_state|default('present') }}
  with_items:
    - bosun-scollector
    - bosun-emitter
    - jq

- name: Create scollector configuration file
  template: src="{{ item }}.j2" dest="/{{ item }}" owner=root group=root mode=0640
  with_items:
    - "etc/bosun/scollector.conf"
  notify:
    - Restart scollector

- block:

    - name: Create external collectors directory
      file: path={{ _scollector.external_collectors.dir }} state=directory owner=root group=root mode=0755

    - block:

        - name: Create external collectors interval directories
          file: path={{ _scollector.external_collectors.dir }}/{{ item.interval }} state=directory owner=root group=root mode=0755
          with_items: "{{ _scollector.external_collectors.collectors }}"
          notify:
            - Restart scollector

        - name: Create external collectors
          template: src="external_collectors/{{ item.template }}" dest="{{ _scollector.external_collectors.dir }}/{{ item.interval }}/{{ item.filename }}" owner=root group=root mode=0750
          with_items: "{{ _scollector.external_collectors.collectors }}"
          notify:
            - Restart scollector

      when: _scollector.external_collectors.collectors is defined


    - name: Announce Meta data of external collector metrics
      run_once: True
      command: >
          curl -w "%{http_code}" -H "Content-Type: application/json" -X POST -d '[ { "metric": "{{ item.metric }}", "name": "rate", "value": "{{ item.ratetype }}" }, { "metric": "{{ item.metric }}", "name": "unit", "value": "{{ item.unit }}" }, { "metric": "{{ item.metric }}", "name": "desc", "value": "{{ item.desc|default('') }}" } ]' http://{{ _scollector.server.ip }}:{{ _scollector.server.port }}/api/metadata/put
      register: result
      failed_when: result.stdout != "204"
      with_items: "{{ _scollector.external_collectors.metric_metadata }}"
      when: _scollector.external_collectors.metric_metadata is defined

  when: _scollector.external_collectors is defined

